import string
from debugging_framework.types import Grammar

grammar_middle: Grammar = {
    "<start>": ["<x> <y> <z>"],
    "<x>": ["<integer>"],
    "<y>": ["<integer>"],
    "<z>": ["<integer>"],
    "<integer>": ["<integer_>", "-<integer_>"],
    "<integer_>": ["<digit>", "<digit><integer_>"],
    "<digit>": [str(num) for num in range(0, 10)],
}

grammar_pysnooper: Grammar = {
    "<start>": ["<options>"],
    "<options>": [" ", "<flag><op>"],
    "<flag>": ["<overwrite><thread_info>"],
    "<op>": [
        "<output><depth><prefix><watch><custom_repr><variables>",
    ],
    "<sep>": [" ", "\n"],
    "<output>": ["-o<sep>", "-o<path><sep>", "-o<sep><path><sep>", ""],
    "<variables>": [
        "-v<variable_list><sep>",
        "-v<sep><variable_list><sep>",
        "-v=<variable_list><sep>",
        "",
    ],
    "<depth>": ["-d<number><sep>", "-d<sep><number><sep>", "-d=<number><sep>", ""],
    "<prefix>": [
        "-p<str_ascii><sep>",
        "-p<sep><str_ascii><sep>",
        "-p=<str_ascii><sep>",
        "",
    ],
    "<watch>": [
        "-w<variable_list><sep>",
        "-w<sep><variable_list><sep>",
        "-w=<variable_list><sep>",
        "",
    ],
    "<custom_repr>": [
        "-c<predicate_list><sep>",
        "-c<sep><predicate_list><sep>",
        "-c=<predicate_list><sep>",
        "",
    ],
    "<overwrite>": ["-O<sep>", ""],
    "<thread_info>": ["-T<sep>", ""],
    "<path>": ["<location>", "<location>.<str_ascii>"],
    "<location>": ["<str_ascii>", "<path>/<str_ascii>"],
    "<variable_list>": ["<variable>", "<variable_list>,<variable>"],
    "<variable>": ["<name>", "<variable>.<name>"],
    "<name>": ["<letter><chars>"],
    "<chars>": ["", "<chars><char>"],
    "<letter>": [letter for letter in string.ascii_letters],
    "<digit>": [digit for digit in string.digits],
    "<char>": [
        "<letter>",
        "<digit>",
        "_",
    ],
    "<predicate_list>": ["<predicate>", "<predicate_list>,<predicate>"],
    "<predicate>": ["<p_function>=<t_function>"],
    "<p_function>": ["int", "str", "float", "bool"],
    "<t_function>": ["repr", "str", "int"],
    "<str_ascii>": ["<chars_ascii>"],
    "<chars_ascii>": ["<char_ascii>", "<char_ascii><chars_ascii>"],
    "<char_ascii>": [str(char) for char in string.ascii_letters + string.digits],
    "<number>": ["0", "<non_zero><digits>"],
    "<non_zero>": ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
    "<digits>": ["", "<digit><digits>"],
}


grammar_youtube_dl_1 = {
    "<start>": ["<match_str>"],
    "<match_str>": ["-q <query> -d <dict>"],
    "<query>": ["<par><stmt_list><par>"],
    "<dict>": ["{<dict_list>}"],
    "<stmt_list>": ["<stmt> & <stmt_list>", "<stmt>"],
    "<stmt>": ["<bool_stmt>", "<comp_stmt>"],
    "<bool_stmt>": ["<unary_op><name>"],
    "<unary_op>": ["!", ""],
    "<comp_stmt>": ["<name> <comp_op><optional> <int>"],
    "<optional>": ["?", ""],
    "<comp_op>": ["<", ">", "<=", ">=", "=", "!="],
    "<dict_list>": ["<kv>, <dict_list>", "<kv>", ""],
    "<kv>": ["<par><name><par>: <value>"],
    "<par>": ["'"],
    "<value>": ["<bool>", "<int>", "'<string>'", "''"],
    "<bool>": ["True", "False", "None"],
    "<name>": [
        "is_live",
        "like_count",
        "description",
        "title",
        "dislike_count",
        "test",
        "other",
    ],
    "<digit>": [str(i) for i in range(10)],
    "<int>": ["<int><digit>", "<digit>"],
    "<string>": ["<string><char>", "<char>"],
    "<char>": [str(char) for char in string.ascii_letters],
}
